Fib(n)
{
if n<=1
 {return n;}

else
 { 
   Fib f1=new Fib(n-1);// subtask1
   Fib f2=new Fib(n-2);// subtask2
   f1.solve();
   f2.solve();
   number=f1.number+f2.number;
   return number;// Join results
 }

------------------------------------
public result solve(Task t)
{
split t into smaller task
for each of the task
solve (ti)
wait for all task to complete
join all individual results
return result
}

------------------------------------

Task----> SubTask====> Fork
Subtask--> Result====> Join
-----------------------------
In Java

private class Fibannoci extends RecursiveClass<Integer>
{
final int n;
Fibannoci(int n)
{
   this.n=n;
}
public Integer compute()//override method
{
 if (n<=1)
   return n;
 Fibannoci f1=new Fibannoci(n:n-1);
 f1.fork();
 Fibannoci f2=new Fibannoci(n:n-2);
 f2.fork();
 return f2.join()+f1.join();
}
}
----------------------------------------------------------------------
class FibonacciExample2{  
 static int n1=0,n2=1,n3=0;    
 static void printFibonacci(int count){    
    if(count>0){    
         n3 = n1 + n2;    
         n1 = n2;    
         n2 = n3;    
         System.out.print(" "+n3);   
         printFibonacci(count-1);    
     }    
 }    
 public static void main(String args[]){    
  int count=10;    
  System.out.print(n1+" "+n2);//printing 0 and 1    
  printFibonacci(count-2);//n-2 because 2 numbers are already printed   
 }  
}  
























